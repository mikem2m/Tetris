{"version":3,"sources":["img/bg.png","gameHelpers.js","components/styles/StyledCell.js","tetrominos.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/styles/StyledTetris.js","hooks/usePlayer.js","hooks/useStage.js","hooks/useGameStatus.js","components/Tetris.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledCell","styled","div","props","color","type","TETROMINOS","0","shape","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","React","memo","StyledStage","height","width","Stage","map","row","cell","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","StyledTetrisWrapper","bgImage","StyledTetris","usePlayer","useState","collided","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","resetPlayer","useCallback","STAGE_WIDTH","prev","clonePlayer","JSON","parse","stringify","offset","useStage","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","forEach","value","reduce","acc","findIndex","unshift","push","sweepRows","Tetris","dropTime","setDropTime","setGameOver","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","event","onKeyUp","keycode","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66b25f57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () => (\r\n    Array.from(Array(STAGE_HEIGHT),()=>\r\n        new Array(STAGE_WIDTH).fill([0,'clear'])\r\n    )\r\n);\r\n\r\nexport const checkCollision = (player,stage,{x:moveX,y:moveY}) => {\r\n    for(let y = 0; y<player.tetromino.length ; y++){\r\n        for(let x = 0; x<player.tetromino[y].length; x++){\r\n            \r\n            // 1. Check that we are on a tetromino cell, not a zero cell\r\n            if(player.tetromino[y][x] !== 0){\r\n                if(\r\n                // 2. Check that our move is inside the game areas height (y)\r\n                !stage[y + player.pos.y + moveY] || \r\n\r\n                // 3. Check that our move is inside the game areas width (x)\r\n                !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n                \r\n                // 4. Check that the cell we're moving to is not set to clear\r\n                stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\r\n\r\n                ){\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n    width:auto;\r\n    background:rgba(${props => props.color},0.8);\r\n    border:${props => props.type === 0?'0px solid':'4px solid'};\r\n    border-bottom-color:rgba(${props => props.color},0.1);\r\n    border-right-color:rgba(${props => props.color},1);\r\n    border-top-color:rgba(${props => props.color},1);\r\n    border-left-color:rgba(${props => props.color},0.3);\r\n`","export const TETROMINOS = {\r\n    0:{shape:[[0]],color:'0,0,0'},\r\n    I:{\r\n        shape:[\r\n        [0,'I',0,0],\r\n        [0,'I',0,0],\r\n        [0,'I',0,0],\r\n        [0,'I',0,0]\r\n        ],\r\n        color:'80,227,230',\r\n    },\r\n    J:{\r\n        shape:[\r\n        [0,'J',0],\r\n        [0,'J',0],\r\n        ['J','J',0]\r\n        ],\r\n        color:'36,95,223',\r\n    },\r\n    L:{\r\n        shape:[\r\n        [0,'L',0],\r\n        [0,'L',0],\r\n        [0,'L','L']\r\n        ],\r\n        color:'223,173,36',\r\n    },\r\n    O:{\r\n        shape:[\r\n        ['O','O'],\r\n        ['O','O']\r\n        ],\r\n        color:'223,217,36',\r\n    },\r\n    S:{\r\n        shape:[\r\n        [0,'S','S'],\r\n        ['S','S',0],\r\n        [0,0,0]\r\n        ],\r\n        color:'48,211,56',\r\n    },\r\n    T:{\r\n        shape:[\r\n        [0,0,0],\r\n        ['T','T','T'],\r\n        [0,'T',0]\r\n        ],\r\n        color:'132,61,198',\r\n    },\r\n    Z:{\r\n        shape:[\r\n        ['Z','Z',0],\r\n        [0,'Z','Z'],\r\n        [0,0,0]\r\n        ],\r\n        color:'227,78,78',\r\n    }\r\n}\r\n\r\nexport const randomTetromino = () => {\r\n    const tetrominos = 'IJLOSTZ';\r\n    const randTetromino = tetrominos[Math.floor(Math.random()*tetrominos.length)];\r\n\r\n    return TETROMINOS[randTetromino];\r\n}","import React from 'react';\r\n\r\nimport {StyledCell} from './styles/StyledCell';\r\nimport {TETROMINOS} from '../tetrominos';\r\n\r\nconst Cell = ({type}) => (\r\n    <StyledCell type={type} color={TETROMINOS[type].color}>\r\n    </StyledCell>\r\n);\r\n\r\nexport default React.memo(Cell);","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n    display:grid;\r\n    grid-template-rows:repeat(\r\n        ${props => props.height},\r\n        calc(25vw / ${props => props.width})\r\n    );\r\n    grid-template-columns:repeat(\r\n        ${props => props.width},\r\n        1fr\r\n    );\r\n    grid-gap: 1px;\r\n    border: 2px solid #333;\r\n    width:100%;\r\n    max-width:25vw;\r\n    backfround: #111;\r\n`","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nimport {StyledStage} from './styles/StyledStage';\r\n\r\nconst Stage = ({stage}) => (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n        {stage.map(row => \r\n            row.map((cell,x)=>\r\n            <Cell key={x} type={cell[0]}/>\r\n            ))}\r\n    </StyledStage>\r\n);\r\n\r\nexport default Stage;","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\n    box-sizing:border-box;\r\n    display:flex;\r\n    align-items:center;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    border: 4px solid #333;\r\n    min-height: 30px;\r\n    width:100%;\r\n    border-radius:20px;\r\n    color:${props => (props.gameOver?'red':'#999')};\r\n    background:#000;\r\n    font-family:Pixel,Arial,Helvetica,sans-serif;\r\n    font-size:0.8rem;\r\n`","import React from 'react';\r\n\r\nimport {StyledDisplay} from './styles/StyledDisplay';\r\n\r\nconst Display = ({gameOver,text}) => (\r\n    <StyledDisplay gameOver={gameOver}>\r\n        {text}\r\n    </StyledDisplay>\r\n);\r\n\r\nexport default Display;","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\n    box-sizing: border-box;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    min-height:30px;\r\n    width:100%;\r\n    border-radius:20px;\r\n    border:none;\r\n    color:white;\r\n    background:#333;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size:1rem;\r\n    cursor:pointer;\r\n    outline:none;\r\n`","import React from 'react';\r\n\r\nimport {StyledStartButton} from './styles/StyledStartButton';\r\n\r\nconst StartButton = ({callback}) => (\r\n    <StyledStartButton onClick={callback}>\r\n        Start Game\r\n    </StyledStartButton>\r\n);\r\n\r\nexport default StartButton;","import styled from 'styled-components';\r\nimport bgImage from '../../img/bg.png';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n    width:100vw;\r\n    height:100vh; \r\n    background:url(${bgImage}) #000;\r\n    background-size:cover;\r\n    overflow:hidden;\r\n`\r\n\r\nexport const StyledTetris = styled.div`\r\n    display:flex;\r\n    align-items:flex-start;\r\n    padding:40px;\r\n    margin:0 auto;\r\n    max-width:900px;\r\n\r\n    aside{\r\n       width:100%;\r\n       max-width:200px;\r\n       display:block;\r\n       padding:0 20px;\r\n    }\r\n\r\n`","import {useState,useCallback} from 'react';\r\n\r\nimport {TETROMINOS,randomTetromino} from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n    const [player,setPlayer] = useState({\r\n        pos:{x:0,y:0},\r\n        tetromino:TETROMINOS[0].shape,\r\n        collided:false,\r\n    });\r\n\r\n    const rotate = (matrix,dir) => {\r\n        // Make the rows to become columns (transpose matrix)\r\n        const rotatedTetro = matrix.map((_,index)=> \r\n        matrix.map(col => \r\n            col[index]\r\n        ));\r\n        \r\n        // Reverse each row to get a rotated matrix\r\n        if(dir > 0){\r\n            // Reverse the column in every row of the tetromino\r\n            return rotatedTetro.map(row => row.reverse());\r\n        }\r\n        // Reverse the row in the tetromino\r\n        return rotatedTetro.reverse();\r\n    };\r\n\r\n    const playerRotate = (stage,dir) => {\r\n        const clonePlayer = JSON.parse(JSON.stringify(player));\r\n        clonePlayer.tetromino = rotate(clonePlayer.tetromino,dir);\r\n\r\n        const pos = clonePlayer.pos.x;\r\n        let offset = 1;\r\n        while(checkCollision(clonePlayer,stage,{x:0,y:0})){\r\n            clonePlayer.pos.x += offset;\r\n            offset = -(offset + (offset>0?1:-1));\r\n            if(offset > clonePlayer.tetromino[0].length){\r\n                rotate(clonePlayer.tetromino,-dir);\r\n                clonePlayer.pos.x = pos;\r\n                return;\r\n            }\r\n        }\r\n        setPlayer(clonePlayer);\r\n    };\r\n\r\n    const updatePlayerPos = ({x,y,collided}) => {\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            pos:{ x:(prev.pos.x += x),\r\n                  y:(prev.pos.y += y)},\r\n            collided, \r\n        }))\r\n    }\r\n\r\n    const resetPlayer = useCallback(() => {\r\n        setPlayer({\r\n            pos:{x:STAGE_WIDTH/2 - 2,y:0},\r\n            tetromino:randomTetromino().shape,\r\n            collided:false, \r\n        })\r\n    },[]);\r\n\r\n    return [player,updatePlayerPos,resetPlayer,playerRotate];\r\n};","import {useState,useEffect} from 'react';\r\nimport {createStage} from '../gameHelpers';\r\n\r\nexport const useStage = (player,resetPlayer) => {\r\n    const [stage,setStage] = useState(createStage());\r\n    const [rowsCleared,setRowsCleared] = useState(0);\r\n\r\n    useEffect(()=>{\r\n        setRowsCleared(0);\r\n\r\n        const sweepRows = newStage => (\r\n            newStage.reduce((acc,row) => {\r\n               if(row.findIndex(cell => cell[0] === 0)===-1){\r\n                   setRowsCleared(prev => prev + 1);\r\n                   acc.unshift(new Array(newStage[0].length).fill([0,'clear']));\r\n                   return acc;\r\n               }\r\n               acc.push(row);\r\n               return acc;\r\n            },[])\r\n        );\r\n\r\n        const updateStage = prevStage => {\r\n            // Flush the stage\r\n            const newStage = prevStage.map(row => \r\n            row.map(cell => (\r\n               cell[1] === 'clear'? [0,'clear']:cell\r\n            )));\r\n\r\n            // Draw the tetromino\r\n            player.tetromino.forEach((row,y)=>{\r\n                row.forEach((value,x)=>{\r\n                   if(value !== 0){\r\n                       newStage[y + player.pos.y][x + player.pos.x]=[\r\n                           value,\r\n                           `${player.collided ? 'merged' : 'clear'}`\r\n                       ]\r\n                   }\r\n                })\r\n            });\r\n\r\n            // Check if we collided\r\n            if(player.collided){\r\n              resetPlayer();\r\n              return sweepRows(newStage);\r\n            };\r\n\r\n            return newStage;\r\n        }\r\n\r\n        setStage(prev => updateStage(prev));\r\n\r\n    },[player,resetPlayer]);\r\n\r\n    return [stage,setStage,rowsCleared];\r\n};","import {useState,useEffect,useCallback} from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n    const [score,setScore] = useState(0);\r\n    const [rows,setRows] = useState(0);\r\n    const [level,setLevel] = useState(0);\r\n\r\n    // From original tetris game - Scoring Scheme\r\n    const linePoints = [40,100,300,1200];\r\n\r\n    const calcScore = useCallback(()=>{\r\n        // We have score\r\n        if(rowsCleared > 0){\r\n            // How original tetris score is calculated\r\n            setScore(prev=>prev + linePoints[rowsCleared - 1] * (level + 1));\r\n            setRows(prev => prev + rowsCleared);\r\n        }\r\n    },[level,linePoints,rowsCleared]);\r\n\r\n    useEffect(()=>{\r\n        calcScore();\r\n    },[calcScore,rowsCleared,score]);\r\n\r\n    return [score,setScore,rows,setRows,level,setLevel];\r\n};","import React,{useState} from 'react';\r\n\r\nimport {createStage,checkCollision} from '../gameHelpers';\r\n\r\n// Components \r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\n\r\n// Styles \r\nimport {StyledTetrisWrapper,StyledTetris} from './styles/StyledTetris';\r\n\r\n// Custom Hooks\r\nimport {usePlayer} from '../hooks/usePlayer';\r\nimport {useStage} from '../hooks/useStage';\r\nimport {useInterval} from '../hooks/useInterval';\r\nimport {useGameStatus} from '../hooks/useGameStatus';\r\n\r\nconst Tetris = () => {\r\n    const [dropTime,setDropTime] = useState(null); \r\n    const [gameOver,setGameOver] = useState(false);\r\n\r\n    const [player,updatePlayerPos,resetPlayer,playerRotate] = usePlayer();\r\n    const [stage,setStage,rowsCleared] = useStage(player,resetPlayer);\r\n    const [score,setScore,rows,setRows,level,setLevel] = useGameStatus(rowsCleared);\r\n\r\n    const movePlayer = dir => {\r\n        if(!checkCollision(player,stage,{x:dir,y:0})){\r\n            updatePlayerPos({x:dir,y:0});\r\n        }\r\n    }\r\n\r\n    const startGame = () => {\r\n        // Reset everything\r\n        setStage(createStage());\r\n        setDropTime(1000);\r\n        resetPlayer();\r\n        setGameOver(false);\r\n        setScore(0);\r\n        setRows(0);\r\n        setLevel(0);\r\n    }\r\n\r\n    const drop = () => {\r\n        // Increase level when player has cleared 10 rows\r\n        if(rows>(level+1)*10){\r\n            setLevel(prev=>prev+1);\r\n            // Decrease droptime for tetromino\r\n            setDropTime(1000 / (level+1) +200);\r\n        }\r\n\r\n        if(!checkCollision(player,stage,{x:0,y:1})){\r\n            updatePlayerPos({x:0,y:1,collided:false});\r\n        }else{\r\n            // Game Over Check\r\n            if(player.pos.y < 1){\r\n                setGameOver(true);\r\n                setDropTime(null);\r\n            }\r\n            updatePlayerPos({x:0,y:0,collided:true});\r\n        }\r\n    }\r\n\r\n    const dropPlayer = () => {\r\n        setDropTime(null);\r\n        drop();\r\n    }\r\n\r\n    const keyUp = ({keycode}) => {\r\n        if(!gameOver){\r\n        setDropTime(1000 / (level+1) +200);\r\n            if(keycode===40){\r\n                setDropTime(1000 / (level+1) +200);\r\n            }\r\n        }\r\n    }\r\n\r\n    const move = ({keyCode}) => {\r\n        if(!gameOver){\r\n            if(keyCode === 37){\r\n                movePlayer(-1);\r\n            }else if(keyCode === 39){\r\n                movePlayer(1);\r\n            }else if(keyCode === 40){\r\n                dropPlayer();\r\n            }else if(keyCode === 38){\r\n                playerRotate(stage,1);\r\n            }\r\n        }\r\n    }\r\n\r\n    useInterval(()=>{\r\n        drop();\r\n    },dropTime);\r\n\r\n    return(\r\n    <StyledTetrisWrapper \r\n    role=\"button\" \r\n    tabIndex=\"0\" \r\n    onKeyDown={event => move(event)} \r\n    onKeyUp={keyUp}>\r\n        <StyledTetris>\r\n        <Stage stage={stage}/>\r\n        <aside>\r\n        {gameOver?(\r\n            <Display gameOver={gameOver} text=\"Game Over\"/>\r\n        ):(\r\n            <div>\r\n            <Display text={`Score : ${score}`}/>\r\n            <Display text={`Rows Cleared : ${rows}`}/>\r\n            <Display text={`Level : ${level + 1}`}/>\r\n            </div>\r\n        )}\r\n        <StartButton callback={startGame}/>\r\n        </aside>\r\n        </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n    )\r\n};\r\n\r\nexport default Tetris;","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div>\n    <Tetris/>\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}